from app import create_app, db

app = create_app()

@app.cli.command("init-db")
def init_db():
    """Commande pour initialiser la base de donn√©es"""
    with app.app_context():
        db.create_all()
    print("‚úÖ Base de donn√©es initialis√©e!")

@app.cli.command("clear-db")
def clear_db():
    """Commande pour vider la base de donn√©es"""
    from app.models import Server
    
    with app.app_context():
        try:
            # Compter le nombre d'entr√©es avant suppression
            count = Server.query.count()
            
            # Supprimer toutes les entr√©es
            Server.query.delete()
            db.session.commit()
            
            print(f"‚úÖ Base de donn√©es vid√©e - {count} entr√©es supprim√©es")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erreur lors du vidage: {e}")

@app.cli.command("scan-now")
def scan_now():
    """Commande pour lancer un scan r√©seau imm√©diat"""
    from scanner import network_scanner
    
    with app.app_context():
        try:
            print("üîç Lancement du scan r√©seau...")
            devices = network_scanner.scan_network()
            
            # Sauvegarder les r√©sultats dans la base
            from app.models import Server
            from datetime import datetime
            
            # Supprimer les anciennes entr√©es
            Server.query.delete()
            
            # Ajouter les nouveaux appareils d√©tect√©s
            for device in devices:
                server = Server(
                    name=device['hostname'],
                    ip_address=device['ip'],
                    status=device['status'],
                    type=device['type'],
                    cpu_usage=0.0,  # √Ä mesurer avec un vrai monitoring
                    memory_usage=0.0,  # √Ä mesurer avec un vrai monitoring
                    last_seen=datetime.utcnow(),
                    response_time=device.get('response_time'),
                    open_ports=str(device.get('open_ports', []))
                )
                db.session.add(server)
            
            db.session.commit()
            print(f"‚úÖ Scan termin√© - {len(devices)} appareils d√©tect√©s et sauvegard√©s")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erreur lors du scan: {e}")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)