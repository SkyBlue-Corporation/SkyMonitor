#!/usr/bin/env python3
import os
import sys
import subprocess
import socket
import threading
from concurrent.futures import ThreadPoolExecutor

def is_venv_active():
    """V√©rifie si un environnement virtuel est actif"""
    return hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)

def check_and_install_requirements():
    """V√©rifie et installe les requirements"""
    try:
        # Essayer d'importer les d√©pendances
        import flask
        import flask_sqlalchemy
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
    except ImportError:
        print("‚ùå D√©pendances manquantes, installation...")
        
        # V√©rifier si on est dans un venv
        if not is_venv_active():
            print("\n‚ö†Ô∏è  ATTENTION: Aucun environnement virtuel actif!")
            print("üìã Veuillez ex√©cuter ces commandes:")
            print("   source venv/bin/activate")
            print("   pip install -r requirements.txt")
            return False
        
        try:
            # Installer les requirements
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
            print("‚úÖ D√©pendances install√©es avec succ√®s")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec de l'installation: {e}")
            return False

def scan_host(ip, port=22, timeout=1):
    """
    Scan un h√¥te sur un port sp√©cifique (SSH par d√©faut)
    Retourne True si le port est ouvert
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((ip, port))
            return result == 0
    except:
        return False

def get_hostname(ip):
    """
    Tente de r√©cup√©rer le nom d'h√¥te
    """
    try:
        hostname = socket.getfqdn(ip)
        return hostname if hostname != ip else f"host-{ip.replace('.', '-')}"
    except:
        return f"host-{ip.replace('.', '-')}"

def detect_device_type(ip, open_ports):
    """
    D√©termine le type d'appareil bas√© sur les ports ouverts
    """
    if 22 in open_ports:  # SSH
        # V√©rifier d'autres ports pour affiner la d√©tection
        if 80 in open_ports or 443 in open_ports:  # HTTP/HTTPS
            return "server"
        elif 3389 in open_ports:  # RDP
            return "workstation"
        else:
            return "server"
    elif 3389 in open_ports:  # RDP
        return "workstation"
    elif 80 in open_ports or 443 in open_ports:  # HTTP/HTTPS
        return "server"
    else:
        return "unknown"

def scan_network(subnet="192.168.1", ports_to_scan=[22, 80, 443, 3389, 21]):
    """
    Scan le r√©seau pour trouver des appareils actifs
    """
    print(f"üîç Scan du r√©seau {subnet}.0/24...")
    active_hosts = []
    
    def check_host(host_ip):
        open_ports = []
        for port in ports_to_scan:
            if scan_host(host_ip, port):
                open_ports.append(port)
        
        if open_ports:
            hostname = get_hostname(host_ip)
            device_type = detect_device_type(host_ip, open_ports)
            
            host_info = {
                'ip': host_ip,
                'hostname': hostname,
                'open_ports': open_ports,
                'type': device_type,
                'status': 'online'
            }
            return host_info
        return None

    # Scanner les 254 h√¥tes possibles
    with ThreadPoolExecutor(max_workers=50) as executor:
        futures = []
        for i in range(1, 255):
            host_ip = f"{subnet}.{i}"
            futures.append(executor.submit(check_host, host_ip))
        
        for future in futures:
            result = future.result()
            if result:
                active_hosts.append(result)
                print(f"‚úÖ {result['ip']} - {result['hostname']} ({result['type']}) - Ports: {result['open_ports']}")

    return active_hosts

def create_network_data():
    """Cr√©e la base de donn√©es avec les appareils r√©seau d√©tect√©s"""
    try:
        from app import create_app, db
        from app.models import Server
        
        app = create_app()
        with app.app_context():
            db.create_all()
            
            # V√©rifier si des donn√©es existent d√©j√†
            if Server.query.count() == 0:
                print("üîÑ Scan du r√©seau en cours...")
                
                # D√©terminer le sous-r√©seau √† scanner
                subnet = get_local_ip()
                
                # Scanner le r√©seau
                network_devices = scan_network(subnet)
                
                if not network_devices:
                    print("‚ùå Aucun appareil trouv√©. V√©rifiez le sous-r√©seau.")
                    # Ajouter un exemple local pour d√©monstration
                    local_device = Server(
                        name='Serveur Local',
                        ip_address='127.0.0.1',
                        status='online',
                        cpu_usage=0.0,
                        memory_usage=0.0,
                        type='server'
                    )
                    db.session.add(local_device)
                else:
                    # Ajouter les appareils d√©tect√©s √† la base de donn√©es
                    for device in network_devices:
                        server = Server(
                            name=device['hostname'],
                            ip_address=device['ip'],
                            status='online',
                            cpu_usage=0.0,
                            memory_usage=0.0,
                            type=device['type']
                        )
                        db.session.add(server)
                
                db.session.commit()
                print(f"‚úÖ {len(network_devices)} appareils r√©seau ajout√©s √† la base de donn√©es")
            else:
                print("‚úÖ Base de donn√©es d√©j√† initialis√©e")
                
    except Exception as e:
        print(f"‚ö†Ô∏è  Attention lors de la cr√©ation des donn√©es: {e}")
        print("üìã Assurez-vous que:")
        print("   - Vous √™tes connect√© au r√©seau")
        print("   - Le sous-r√©seau est correct")
        print("   - Les ports de scan ne sont pas bloqu√©s par un firewall")

def get_local_ip():
    """R√©cup√®re l'adresse IP locale pour d√©terminer le sous-r√©seau"""
    try:
        # Cr√©er une socket pour d√©terminer l'IP locale
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            # Retourner les 3 premiers octets
            return '.'.join(local_ip.split('.')[:3])
    except:
        return "192.168.1"  # Fallback

def init_database():
    """Initialise la base de donn√©es"""
    try:
        from app import create_app, db
        
        app = create_app()
        with app.app_context():
            db.create_all()
            print("‚úÖ Base de donn√©es initialis√©e")
            
            # V√©rifier si des donn√©es existent
            from app.models import Server
            count = Server.query.count()
            print(f"üìä {count} appareils dans la base")
            
    except Exception as e:
        print(f"‚ùå Erreur initialisation DB: {e}")

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage du syst√®me de monitoring r√©seau...")
    print(f"üìÅ R√©pertoire: {os.getcwd()}")
    
    # V√©rifier l'environnement virtuel
    if not is_venv_active():
        print("\n" + "="*60)
        print("‚ùå ENVIRONNEMENT VIRTUEL NON ACTIF")
        print("="*60)
        print("\nüìã Pour corriger ce probl√®me, ex√©cutez ces commandes:")
        print("\n1. Cr√©er l'environnement virtuel (une seule fois):")
        print("   python3 -m venv venv")
        print("\n2. Activer l'environnement virtuel:")
        print("   source venv/bin/activate")
        print("\n3. Installer les d√©pendances:")
        print("   pip install -r requirements.txt")
        print("\n4. Red√©marrer ce script:")
        print("   python start.py")
        print("\n" + "="*60)
        return
    
    print(f"‚úÖ Environnement virtuel: {sys.prefix}")
    
    # V√©rifier et installer les d√©pendances
    if not check_and_install_requirements():
        return
    
    # D√©tecter le sous-r√©seau automatiquement
    subnet = get_local_ip()
    print(f"üåê Sous-r√©seau d√©tect√©: {subnet}.0/24")
    
    # Initialiser la base de donn√©es
    init_database()
    
    # Cr√©er les donn√©es r√©seau (scan automatique)
    create_network_data()
    
    # D√©marrer Flask
    print("\nüåê D√©marrage du serveur Flask...")
    try:
        from run import app
        print("\n" + "="*50)
        print("‚úÖ APPLICATION PR√äTE!")
        print("="*50)
        print("üìä Acc√©dez √†: http://localhost:5000")
        print("üîç Scan r√©seau automatique activ√©")
        print("üõë Pour arr√™ter: Ctrl+C")
        print("="*50)
        
        app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=False)
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        print("\nüîß D√©pannage:")
        print("1. V√©rifiez que tous les fichiers sont pr√©sents")
        print("2. V√©rifiez la structure des dossiers")
        print("3. V√©rifiez les imports dans les fichiers Python")

if __name__ == '__main__':
    main()