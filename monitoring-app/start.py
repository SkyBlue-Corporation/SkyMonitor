#!/usr/bin/env python3
import os
import sys
import subprocess

def is_venv_active():
    """V√©rifie si un environnement virtuel est actif"""
    return hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix)

def check_and_install_requirements():
    """V√©rifie et installe les requirements"""
    try:
        # Essayer d'importer les d√©pendances
        import flask
        import flask_sqlalchemy
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
    except ImportError:
        print("‚ùå D√©pendances manquantes, installation...")
        
        # V√©rifier si on est dans un venv
        if not is_venv_active():
            print("\n‚ö†Ô∏è  ATTENTION: Aucun environnement virtuel actif!")
            print("üìã Veuillez ex√©cuter ces commandes:")
            print("   source venv/bin/activate")
            print("   pip install -r requirements.txt")
            return False
        
        try:
            # Installer les requirements
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
            print("‚úÖ D√©pendances install√©es avec succ√®s")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå √âchec de l'installation: {e}")
            return False

def create_sample_data():
    """Cr√©e des donn√©es d'exemple"""
    try:
        from app import create_app, db
        from app.models import Server
        
        app = create_app()
        with app.app_context():
            db.create_all()
            
            # V√©rifier si des donn√©es existent d√©j√†
            if Server.query.count() == 0:
                # Cr√©er des donn√©es d'exemple
                sample_servers = [
                    Server(name='Serveur Web Principal', ip_address='192.168.1.10', status='online', cpu_usage=25.0, memory_usage=60.0, type='server'),
                    Server(name='Base de Donn√©es', ip_address='192.168.1.11', status='warning', cpu_usage=85.0, memory_usage=45.0, type='server'),
                    Server(name='PC-Administration', ip_address='192.168.1.50', status='online', cpu_usage=10.0, memory_usage=40.0, type='workstation'),
                    Server(name='Container-App', ip_address='192.168.1.100', status='online', cpu_usage=5.0, memory_usage=20.0, type='container'),
                ]
                
                db.session.add_all(sample_servers)
                db.session.commit()
                print("‚úÖ Donn√©es d'exemple cr√©√©es")
            else:
                print("‚úÖ Base de donn√©es d√©j√† initialis√©e")
                
    except Exception as e:
        print(f"‚ö†Ô∏è  Attention lors de la cr√©ation des donn√©es: {e}")

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage du syst√®me de monitoring...")
    print(f"üìÅ R√©pertoire: {os.getcwd()}")
    
    # V√©rifier l'environnement virtuel
    if not is_venv_active():
        print("\n" + "="*60)
        print("‚ùå ENVIRONNEMENT VIRTUEL NON ACTIF")
        print("="*60)
        print("\nüìã Pour corriger ce probl√®me, ex√©cutez ces commandes:")
        print("\n1. Cr√©er l'environnement virtuel (une seule fois):")
        print("   python3 -m venv venv")
        print("\n2. Activer l'environnement virtuel:")
        print("   source venv/bin/activate")
        print("\n3. Installer les d√©pendances:")
        print("   pip install -r requirements.txt")
        print("\n4. Red√©marrer ce script:")
        print("   python start.py")
        print("\n" + "="*60)
        return
    
    print(f"‚úÖ Environnement virtuel: {sys.prefix}")
    
    # V√©rifier et installer les d√©pendances
    if not check_and_install_requirements():
        return
    
    # Cr√©er les donn√©es d'exemple
    create_sample_data()
    
    # D√©marrer Flask
    print("\nüåê D√©marrage du serveur Flask...")
    try:
        from run import app
        print("\n" + "="*50)
        print("‚úÖ APPLICATION PR√äTE!")
        print("="*50)
        print("üìä Acc√©dez √†: http://localhost:5000")
        print("üõë Pour arr√™ter: Ctrl+C")
        print("="*50)
        
        app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=False)
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        print("\nüîß D√©pannage:")
        print("1. V√©rifiez que tous les fichiers sont pr√©sents")
        print("2. V√©rifiez la structure des dossiers")
        print("3. V√©rifiez les imports dans les fichiers Python")

if __name__ == '__main__':
    main()